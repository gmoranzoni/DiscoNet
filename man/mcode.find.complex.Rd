% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/community_detection.R
\name{mcode.find.complex}
\alias{mcode.find.complex}
\title{MCODE Find Complex Procedure}
\usage{
mcode.find.complex(neigh, neighbor_indx, vertex_weight, D, seed_vertex, seen)
}
\arguments{
\item{neigh}{A vector containing the neighboring vertices for each vertex in the graph.}

\item{neighbor_indx}{An index vector where each element points to the positions in
the `neigh` vector, defining the range of neighbors for each vertex.}

\item{vertex_weight}{A numeric vector containing the weights for each vertex in the graph.}

\item{D}{A numeric value representing the density parameter utilized in the complex detection process.}

\item{seed_vertex}{An integer specifying the vertex where the search for the complex initiates.}

\item{seen}{A logical vector indicating whether each vertex has been processed or encountered previously.}
}
\value{
A list with two components:
        - `seen`: A logical vector updated to indicate which vertices have been processed.
        - `COMPLEX`: A numeric vector containing the indices of vertices included in the identified complex.
}
\description{
This function identifies a single densely connected cluster (or complex) within a graph
using the MCODE (Molecular Complex Detection) algorithm. A low-level helper function
that leverages a compiled C function to efficiently find regions of high connectivity.
}
\examples{
\dontrun{
# Assuming pre-processed graph data: neigh, neighbor_indx, vertex_weight, D, seed_vertex, and seen are available.

result <- mcode.find.complex(neigh, neighbor_indx, vertex_weight, D, seed_vertex, seen)
print(result$COMPLEX) # Output the vertices included in the identified complex
}
}
