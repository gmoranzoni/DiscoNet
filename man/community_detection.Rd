% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/community_detection.R
\name{community_detection}
\alias{community_detection}
\title{Community Detection in Graphs}
\usage{
community_detection(
  network,
  algorithm,
  D = 0.5,
  haircut = FALSE,
  fluff = FALSE,
  fdt = 0.8,
  loops = FALSE,
  resolution = 1
)
}
\arguments{
\item{network}{An `igraph` object. The input network for community detection.}

\item{algorithm}{Character string. Specifies the algorithm ('louvain', 'leiden', or 'mcode').}

\item{D}{Numeric. Vertex weight percentage, relevant for MCODE. Default is 0.5.}

\item{haircut}{Logical. MCODE-specific, trims singly-connected nodes. Default is FALSE.}

\item{fluff}{Logical. MCODE-specific, expands clusters to include bordering nodes. Default is FALSE.}

\item{fdt}{Numeric. MCODE-specific, used in the fluff procedure. Default is 0.8.}

\item{loops}{Logical. Indicates if loops are allowed in the graph. Default is FALSE.}

\item{resolution}{Numeric. Resolution parameter for algorithms like Louvain and Leiden,
affecting the granularity of communities. Default is 1.}
}
\value{
A list of induced subgraphs representing detected communities. For MCODE,
  the list also includes scores for each subgraph.
}
\description{
Applies selected community detection algorithm on a network and
  returns detected communities as induced subgraphs. Options are available for
  various algorithms and their respective parameters.
}
\details{
Community Detection in Graphs

Performs community detection on a given graph using the specified algorithm.
Supports the Louvain, Leiden, and MCODE algorithms. For the MCODE algorithm,
additional post-processing options like `fluff` and `haircut` are available.
}
\examples{
\dontrun{
# Assuming an igraph object 'my_graph':
result_louvain <- community_detection(my_graph, algorithm = "louvain")
result_leiden <- community_detection(my_graph, algorithm = "leiden")
result_mcode <- community_detection(my_graph, algorithm = "mcode", D = 0.6, fluff = TRUE)
}
}
